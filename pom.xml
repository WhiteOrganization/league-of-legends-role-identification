<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- region Project configuration -->
    <groupId>org.white_sdev.white_gaming.lol</groupId>
    <artifactId>league-of-legends-role-identification</artifactId>
    <version>1.0.7</version>
    <name>${project.groupId}:${project.artifactId}</name>
    <description>This library will help you to take an educated guess and calculate the rol/position/lane in which a champion will or should be in a 5v5 team of a League of Legends match</description>
    <!--endregion-->

    <properties>
        <!-- region Configures Java version & Main full package and class name -->
        <!-- WARNING: add release scope if 1.9 and older versions are used at build/plugins/plugin/[maven-compiler-plugin]/configuration-->
        <java.version>8</java.version>
        <!--endregion-->
        <!-- region General configurations of the project -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <!-- In case the compiling device doesn't have Docker installed, you can create the docker img with Jib -->
<!--        <jkube.build.strategy>jib</jkube.build.strategy>-->
        <!-- endregion General configurations of the project -->
        <junit.jupiter.version>5.9.2</junit.jupiter.version>
        <junit.platform.version>1.3.2</junit.platform.version>
        <surefire.failsafe.plugin.version>3.0.0-M8</surefire.failsafe.plugin.version>
        <logs.path>${project.build.directory}/test-reports/logs</logs.path>
    </properties>

    <dependencies>

        <!-- region JCL -->
        <!-- hooks lombok with the Sl4fj Provider -->
        <!-- https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>2.0.5</version>
            <scope>test</scope>
        </dependency>
        <!-- endregion JCL -->

        <!-- region Sl4fj Provider -->
        <!-- https://www.slf4j.org/codes.html#noProviders -->
        <!-- This is the one that Spring uses -->
        <!-- https://logback.qos.ch/manual/layouts.html -->
        <!-- this will allow you to use logback-test.xml file -->
        <!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
        <!-- require slf4j-api & logback-core (Lombok includes it) -->
        <!--suppress VulnerableLibrariesLocal -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.4.7</version>
            <scope>compile</scope>
        </dependency>
        <!-- endregion SL4fj Provider -->

        <!-- region Lombok (Annotations) Configuration -->
        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.30</version>
            <scope>provided</scope>
        </dependency>
        <!-- endregion Lombok (Annotations) Configuration-->

        <!-- region UnitTesting -->

        <!-- region AssertJ -->
        <!-- https://mvnrepository.com/artifact/org.assertj/assertj-core -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.24.2</version>
            <scope>test</scope>
        </dependency>
        <!-- endregion AssertJ -->

        <!-- region JUnit5 -->
        <!-- Spring has this already for testing scope-->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- endregion JUnit5 -->

        <!-- region Mockito -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.2.0</version>
            <scope>test</scope>
        </dependency>
        <!-- endregion Mockito -->

        <!-- endregion UnitTesting -->
    </dependencies>

    <!-- region disable DockLint -->
    <!-- Eliminates the JavaDoc problems in later versions when you have problems in the documentation -->
    <profiles>
        <profile>
            <id>disable-java8-doclint</id>
            <activation>
                <jdk>[1.8,)</jdk>
            </activation>
            <properties>
                <doclint>none</doclint>
            </properties>
        </profile>
    </profiles>
    <!-- endregion disable DockLint -->

    <build>
        <plugins>
            <!-- region Established the java version defined in the properties' section for every scope (compatible with newer java versions) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <!-- WARNING: add release property for 1.9 and older versions -->
<!--                    <release>${java.version}</release>-->
                </configuration>
            </plugin>
            <!-- endregion -->

            <!-- region Maven is able to run JUnit5 Tests (surefire) -->
            <!-- region Deprecated? -->
            <!-- This requires junit-jupiter-engine [in junit-jupiter] dependency! -->
            <!-- This will run everything that Starts or ends with Test[(Case)|s]{0-1}. -->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-surefire-plugin</artifactId>-->
            <!--                <version>${surefire.failsafe.plugin.version}</version>-->
            <!--                <executions>-->
            <!--                    <execution><goals><goal>test</goal></goals></execution>-->
            <!--                </executions>-->
            <!--&lt;!&ndash;                <configuration>&ndash;&gt;-->
            <!--&lt;!&ndash;                    <reportsDirectory>${logs.path}</reportsDirectory>&ndash;&gt;-->
            <!--&lt;!&ndash;                    <redirectTestOutputToFile>true</redirectTestOutputToFile>&ndash;&gt;-->
            <!--&lt;!&ndash;                </configuration>&ndash;&gt;-->

            <!--                &lt;!&ndash; region Deprecated in 3.0.0-M4 &ndash;&gt;-->
            <!--                &lt;!&ndash; above M3 will get this on its own, but it will not let you know,-->
            <!--                    it will just throw a problem with org/apache/maven/surefire/booter/ForkedProcessEvent &ndash;&gt;-->
            <!--                <dependencies>-->
            <!--                    <dependency>-->
            <!--                        <groupId>org.junit.platform</groupId>-->
            <!--                        <artifactId>junit-platform-surefire-provider</artifactId>-->
            <!--                        <version>RELEASE</version>-->
            <!--                    </dependency>-->
            <!--                    <dependency>-->
            <!--                        <groupId>org.junit.jupiter</groupId>-->
            <!--                        <artifactId>junit-jupiter-engine</artifactId>-->
            <!--                        <version>RELEASE</version>-->
            <!--                    </dependency>-->
            <!--                </dependencies>-->
            <!--                &lt;!&ndash; endregion Deprecated in 3.0.0-M4 &ndash;&gt;-->
            <!--            </plugin>-->
            <!-- endregion Deprecated? -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
                <executions>
                    <execution><goals><goal>test</goal></goals></execution>
                </executions>
                <configuration>
                    <redirectTestOutputToFile>true</redirectTestOutputToFile>
                    <reportsDirectory>${logs.path}</reportsDirectory>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.junit.platform</groupId>
                        <artifactId>junit-platform-surefire-provider</artifactId>
                        <version>${junit.platform.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.junit.jupiter</groupId>
                        <artifactId>junit-jupiter-engine</artifactId>
                        <version>${junit.jupiter.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <!-- endregion -->
        </plugins>
    </build>

</project>